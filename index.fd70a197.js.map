{"mappings":"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","sources":["<anon>","src/index.ts","src/modules/game.ts","src/modules/utility.ts","src/modules/display.ts","src/modules/controller.ts"],"sourcesContent":["function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $b2f1e9a6ec8b94de$exports = {};\n\n$parcel$export($b2f1e9a6ec8b94de$exports, \"Player\", () => $b2f1e9a6ec8b94de$export$2616165974278734);\n$parcel$export($b2f1e9a6ec8b94de$exports, \"AI\", () => $b2f1e9a6ec8b94de$export$d710c5f50fc7496a);\nclass $42da5ad2df7a1981$export$5152af454f4d0087 {\n    constructor(size, ItemClass){\n        this.size = size;\n        this.cells = Array.from({\n            length: this.size * this.size\n        }, ()=>new ItemClass());\n    }\n    at(pos) {\n        if (pos.x < 1 || pos.x > this.size) return;\n        if (pos.y < 1 || pos.y > this.size) return;\n        const index = this.size * (pos.y - 1) + pos.x - 1;\n        return this.cells[index];\n    }\n    atIndex(index) {\n        return this.cells[index];\n    }\n}\nfunction $42da5ad2df7a1981$export$d598bea9b5c28c76(index) {\n    const gridSize = 10;\n    const x = index % gridSize;\n    const y = Math.floor(index / gridSize);\n    return {\n        x: x + 1,\n        y: y + 1\n    };\n}\nfunction $42da5ad2df7a1981$export$c0f58cfb66611d0d() {\n    if (Math.random() > 0.5) return \"up\";\n    return \"right\";\n}\n\n\nclass $b2f1e9a6ec8b94de$export$7930c61d9b464618 {\n    constructor(size){\n        this.size = size;\n        this.health = size;\n        this.isAlive = true;\n        this.bodyCoords = [];\n    }\n    getHit() {\n        if (this.health <= 0 || !this.isAlive) return;\n        this.health -= 1;\n        if (this.health <= 0) this.isAlive = false;\n    }\n}\nclass $b2f1e9a6ec8b94de$var$BoardCell {\n    constructor(){\n        this.isHit = false;\n        this.ship = null;\n        this.isOccupied = false;\n    }\n}\nclass $b2f1e9a6ec8b94de$var$Gameboard {\n    constructor(boardSize){\n        this.grid = new (0, $42da5ad2df7a1981$export$5152af454f4d0087)(boardSize, $b2f1e9a6ec8b94de$var$BoardCell);\n        this.boardSize = boardSize;\n        this.shipsOnGameboard = [];\n        this.shotsCounter = 0;\n        this.shotsOnTargetCounter = 0;\n    }\n    calculateBodyCoords(size, frontPos, facing) {\n        const result = [];\n        if (facing === \"up\") for(let i = 0; i < size; i++)result.push({\n            x: frontPos.x,\n            y: frontPos.y + i\n        });\n        else if (facing === \"right\") for(let i = 0; i < size; i++)result.push({\n            x: frontPos.x - i,\n            y: frontPos.y\n        });\n        return result;\n    }\n    blockAdjacentCoords(pos) {\n        const deltas = [\n            [\n                -1,\n                1\n            ],\n            [\n                0,\n                1\n            ],\n            [\n                1,\n                1\n            ],\n            [\n                -1,\n                0\n            ],\n            [\n                1,\n                0\n            ],\n            [\n                -1,\n                -1\n            ],\n            [\n                0,\n                -1\n            ],\n            [\n                1,\n                -1\n            ]\n        ];\n        for (const delta of deltas){\n            const cellCoords = {\n                x: pos.x + delta[0],\n                y: pos.y + delta[1]\n            };\n            if (cellCoords.x < 1 || cellCoords.x > this.boardSize) continue;\n            if (cellCoords.y < 1 || cellCoords.y > this.boardSize) continue;\n            if (this.grid.at(cellCoords).isOccupied) continue;\n            this.grid.at(cellCoords).isOccupied = true;\n        }\n    }\n    checkPositionLegal(size, frontPos, facing) {\n        const bodyCoords = this.calculateBodyCoords(size, frontPos, facing);\n        for (const pos of bodyCoords){\n            if (pos.x < 1 || pos.x > this.boardSize) return false;\n            if (pos.y < 1 || pos.y > this.boardSize) return false;\n            if (this.grid.at(pos).isOccupied) return false;\n        }\n        return true;\n    }\n    placeShip(ship, frontPos, facing) {\n        if (this.shipsOnGameboard.includes(ship)) return;\n        if (!this.checkPositionLegal(ship.size, frontPos, facing)) return;\n        const bodyCoords = this.calculateBodyCoords(ship.size, frontPos, facing);\n        for (const pos of bodyCoords){\n            this.grid.at(pos).ship = ship;\n            this.grid.at(pos).isOccupied = true;\n            this.blockAdjacentCoords(pos);\n        }\n        ship.bodyCoords.push(...bodyCoords);\n        this.shipsOnGameboard.push(ship);\n    }\n    receiveShot(pos) {\n        let cell = this.grid.at(pos);\n        if (cell.isHit) return;\n        cell.isHit = true;\n        this.shotsCounter++;\n        if (cell.ship) {\n            cell.ship.getHit();\n            this.shotsOnTargetCounter++;\n        }\n    }\n}\nclass $b2f1e9a6ec8b94de$export$2616165974278734 {\n    constructor(){\n        this.gameboard = new $b2f1e9a6ec8b94de$var$Gameboard(10);\n        this.ships = [\n            ...this.initShips()\n        ];\n    }\n    initShips() {\n        const result = [\n            new $b2f1e9a6ec8b94de$export$7930c61d9b464618(5)\n        ];\n        result.push(new $b2f1e9a6ec8b94de$export$7930c61d9b464618(4), new $b2f1e9a6ec8b94de$export$7930c61d9b464618(4));\n        result.push(new $b2f1e9a6ec8b94de$export$7930c61d9b464618(3), new $b2f1e9a6ec8b94de$export$7930c61d9b464618(3));\n        result.push(new $b2f1e9a6ec8b94de$export$7930c61d9b464618(2), new $b2f1e9a6ec8b94de$export$7930c61d9b464618(2), new $b2f1e9a6ec8b94de$export$7930c61d9b464618(2));\n        return result;\n    }\n    placeShipSuccessfully(ship, frontPos, facing) {\n        const currentShipsOnBoard = this.gameboard.shipsOnGameboard.length;\n        this.gameboard.placeShip(ship, frontPos, facing);\n        if (this.gameboard.shipsOnGameboard.length === currentShipsOnBoard + 1) return true;\n        return false;\n    }\n    shoot(opponent, pos) {\n        const currentShotsCounter = opponent.gameboard.shotsCounter; // to check if same shot was attempted before\n        const currentShotsOnTarget = opponent.gameboard.shotsOnTargetCounter; // to check if it hit a ship\n        opponent.gameboard.receiveShot(pos);\n        if (opponent.gameboard.shotsCounter === currentShotsCounter) return null;\n        if (opponent.gameboard.shotsOnTargetCounter > currentShotsOnTarget) return \"hit\";\n        return \"miss\";\n    }\n    countShipsAlive() {\n        return this.ships.filter((ship)=>{\n            if (ship.isAlive === true) return ship;\n        }).length;\n    }\n}\nclass $b2f1e9a6ec8b94de$export$d710c5f50fc7496a extends $b2f1e9a6ec8b94de$export$2616165974278734 {\n    constructor(){\n        super();\n        this.clue = null;\n        this.clueDeltas = [\n            [\n                0,\n                1\n            ],\n            [\n                1,\n                0\n            ],\n            [\n                0,\n                -1\n            ],\n            [\n                -1,\n                0\n            ]\n        ];\n        this.impossibleCoords = new Set();\n    }\n    shoot(opponent, pos) {\n        console.log(this.impossibleCoords);\n        if (pos) {\n            const countOfShipsAlive = opponent.countShipsAlive();\n            const shotResult = $b2f1e9a6ec8b94de$export$2616165974278734.prototype.shoot(opponent, pos);\n            if (shotResult === \"hit\") {\n                if (this.clue) {\n                    if (this.clue.x === pos.x + 1 || this.clue.x === pos.x - 1) this.clueDeltas = [\n                        [\n                            1,\n                            0\n                        ],\n                        [\n                            -1,\n                            0\n                        ]\n                    ];\n                    else this.clueDeltas = [\n                        [\n                            0,\n                            1\n                        ],\n                        [\n                            0,\n                            -1\n                        ]\n                    ];\n                }\n                this.clue = pos; // update clues\n                const newCountOfShipsAlive = opponent.countShipsAlive();\n                if (countOfShipsAlive === newCountOfShipsAlive + 1) {\n                    this.clue = null; // forget all clues\n                    this.clueDeltas = [\n                        [\n                            0,\n                            1\n                        ],\n                        [\n                            1,\n                            0\n                        ],\n                        [\n                            0,\n                            -1\n                        ],\n                        [\n                            -1,\n                            0\n                        ]\n                    ];\n                    const theShip = opponent.gameboard.grid.at(pos).ship;\n                    for (const cell of theShip.bodyCoords)this.pushImpossibleCoords(cell);\n                }\n            }\n            return shotResult;\n        } else if (this.clue === null) return this.shootRandomly(opponent);\n        else return this.shootWithClue(opponent);\n    }\n    shootRandomly(opponent) {\n        const countOfShipsAlive = opponent.countShipsAlive();\n        let randomPosition = this.getRandomPosition();\n        let safeLoop = 0;\n        while([\n            ...this.impossibleCoords\n        ].includes(`${randomPosition.x}-${randomPosition.y}`)){\n            randomPosition = this.getRandomPosition();\n            // (if impossible to hit anything, get another position)\n            safeLoop++;\n            if (safeLoop > 1499) throw new Error(\"Something went wrong\");\n        }\n        safeLoop = 0;\n        let shotResult = $b2f1e9a6ec8b94de$export$2616165974278734.prototype.shoot(opponent, randomPosition);\n        while(shotResult === null && [\n            ...this.impossibleCoords\n        ].includes(`${randomPosition.x}-${randomPosition.y}`)){\n            randomPosition = this.getRandomPosition();\n            shotResult = $b2f1e9a6ec8b94de$export$2616165974278734.prototype.shoot(opponent, randomPosition); // if mistake, try again\n            safeLoop++;\n            if (safeLoop > 1499) throw new Error(\"Something went wrong\");\n        }\n        if (shotResult === \"hit\") {\n            this.clue = randomPosition; // update clues\n            const newCountOfShipsAlive = opponent.countShipsAlive();\n            if (countOfShipsAlive === newCountOfShipsAlive + 1) {\n                this.clue = null; // forget all clues\n                const theShip = opponent.gameboard.grid.at(randomPosition).ship;\n                for (const cell of theShip.bodyCoords)this.pushImpossibleCoords(cell);\n            }\n        }\n        return shotResult;\n    }\n    shootWithClue(opponent) {\n        const deltas = this.clueDeltas;\n        const { x: x , y: y  } = this.clue;\n        let randomDelta = deltas[Math.floor(Math.random() * deltas.length)];\n        let possibleShot = {\n            x: x + randomDelta[0],\n            y: y + randomDelta[1]\n        };\n        let safeLoop = 0;\n        while([\n            ...this.impossibleCoords\n        ].includes(`${possibleShot.x}-${possibleShot.y}`) || possibleShot.x < 1 || possibleShot.x > 10 || possibleShot.y < 1 || possibleShot.y > 10 || opponent.gameboard.grid.at(possibleShot).isHit === true){\n            randomDelta = deltas[Math.floor(Math.random() * deltas.length)];\n            possibleShot = {\n                x: x + randomDelta[0],\n                y: y + randomDelta[1]\n            };\n            // (when shot invalid, try again)\n            safeLoop++;\n            if (safeLoop > 10) break;\n        }\n        if (safeLoop > 10) {\n            this.clue = null; // if no result, forget clue\n            return null;\n        }\n        return this.shoot(opponent, possibleShot);\n    }\n    getRandomPosition() {\n        const randomX = Math.ceil(Math.random() * 10);\n        const randomY = Math.ceil(Math.random() * 10);\n        return {\n            x: randomX,\n            y: randomY\n        };\n    }\n    pushImpossibleCoords(pos) {\n        const deltas = [\n            [\n                -1,\n                1\n            ],\n            [\n                0,\n                1\n            ],\n            [\n                1,\n                1\n            ],\n            [\n                -1,\n                0\n            ],\n            [\n                1,\n                0\n            ],\n            [\n                -1,\n                -1\n            ],\n            [\n                0,\n                -1\n            ],\n            [\n                1,\n                -1\n            ]\n        ];\n        for (const delta of deltas){\n            const cellCoords = {\n                x: pos.x + delta[0],\n                y: pos.y + delta[1]\n            };\n            if (cellCoords.x < 1 || cellCoords.x > 10) continue;\n            if (cellCoords.y < 1 || cellCoords.y > 10) continue;\n            if ([\n                ...this.impossibleCoords\n            ].includes(`${cellCoords.x}-${cellCoords.y}`)) continue;\n            this.impossibleCoords.add(`${cellCoords.x}-${cellCoords.y}`);\n        }\n    }\n}\n$b2f1e9a6ec8b94de$exports = {\n    Ship: $b2f1e9a6ec8b94de$export$7930c61d9b464618,\n    Gameboard: $b2f1e9a6ec8b94de$var$Gameboard,\n    Player: $b2f1e9a6ec8b94de$export$2616165974278734,\n    AI: $b2f1e9a6ec8b94de$export$d710c5f50fc7496a\n};\n\n\nconst $b8f0d7ab97dededd$var$section1 = document.querySelector(\"#section1\");\nconst $b8f0d7ab97dededd$var$section2 = document.querySelector(\"#section2\");\nlet $b8f0d7ab97dededd$var$board1 = $b8f0d7ab97dededd$var$section1.querySelector(\".player-board\");\nlet $b8f0d7ab97dededd$var$board2 = $b8f0d7ab97dededd$var$section2.querySelector(\".player-board\");\nconst $b8f0d7ab97dededd$var$textParagraph = document.querySelector(\".text-field > p\");\nconst $b8f0d7ab97dededd$var$messages = [\n    \"Place your ships. Press <b>right mouse button</b> to rotate the ship...\",\n    \"Make your move!\",\n    \"Waiting for opponent to shoot...\",\n    \"Hit! Make your next move...\",\n    \"Ship destroyed! Make your next move...\",\n    \"YOU WON! Reload the page to play again.\",\n    \"YOU LOST! Reload the page to play again.\"\n];\nfunction $b8f0d7ab97dededd$export$6558b1f3861b096(i) {\n    $b8f0d7ab97dededd$var$textParagraph.innerHTML = $b8f0d7ab97dededd$var$messages[i];\n}\nfunction $b8f0d7ab97dededd$export$a27f2fe564091e34() {\n    $b8f0d7ab97dededd$var$board1 = $b8f0d7ab97dededd$var$section1.querySelector(\".player-board\");\n    $b8f0d7ab97dededd$var$board2 = $b8f0d7ab97dededd$var$section2.querySelector(\".player-board\");\n}\nfunction $b8f0d7ab97dededd$export$2cd8252107eb640b() {\n    const gridSize = 10;\n    $b8f0d7ab97dededd$var$board1.style.gridTemplateRows = `repeat(${gridSize}, 1fr)`;\n    $b8f0d7ab97dededd$var$board1.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`;\n    $b8f0d7ab97dededd$var$board2.style.gridTemplateRows = `repeat(${gridSize}, 1fr)`;\n    $b8f0d7ab97dededd$var$board2.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`;\n    for(let i = 0; i < 10; i++)for(let j = 0; j < 10; j++){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        $b8f0d7ab97dededd$var$board1.appendChild(cell);\n    }\n    for(let i = 0; i < 10; i++)for(let j = 0; j < 10; j++){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\", \"cell--hidden\");\n        $b8f0d7ab97dededd$var$board2.appendChild(cell);\n    }\n}\nfunction $b8f0d7ab97dededd$export$de3e5ae76793348d(player) {\n    const grid = player.gameboard.grid;\n    const htmlCells = $b8f0d7ab97dededd$var$board1.querySelectorAll(\".cell\");\n    for (const cell of grid.cells){\n        if (cell.isHit && cell.ship !== null) htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--hit-ship\");\n        else if (cell.isHit) htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--hit\");\n        else if (cell.ship !== null) htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--ship-part\");\n    }\n    $b8f0d7ab97dededd$var$section1.querySelector(\".player-ships\").innerHTML = \"\";\n    const ships = $b8f0d7ab97dededd$var$getShipsHTML(player);\n    for (const ship of ships)$b8f0d7ab97dededd$var$section1.querySelector(\".player-ships\").append(ship);\n}\nfunction $b8f0d7ab97dededd$export$c557ab29ccfb7412(player) {\n    const grid = player.gameboard.grid;\n    const htmlCells = $b8f0d7ab97dededd$var$board2.querySelectorAll(\".cell\");\n    for (const cell of grid.cells){\n        if (cell.isHit && cell.ship !== null) {\n            htmlCells[grid.cells.indexOf(cell)].classList.remove(\"cell--hidden\");\n            htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--hit-ship\");\n        } else if (cell.isHit) {\n            htmlCells[grid.cells.indexOf(cell)].classList.remove(\"cell--hidden\");\n            htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--hit\");\n        }\n    }\n    $b8f0d7ab97dededd$var$section2.querySelector(\".player-ships\").innerHTML = \"\";\n    const ships = $b8f0d7ab97dededd$var$getShipsHTML(player);\n    for (const ship of ships)$b8f0d7ab97dededd$var$section2.querySelector(\".player-ships\").append(ship);\n}\nfunction $b8f0d7ab97dededd$var$getShipsHTML(player) {\n    const result = [];\n    for (const ship of player.ships){\n        const htmlShip = document.createElement(\"div\");\n        htmlShip.classList.add(\"small-ship\");\n        for(let i = 0; i < ship.size; i++){\n            const htmlShipPart = document.createElement(\"div\");\n            htmlShipPart.classList.add(\"small-cell\");\n            if (!ship.isAlive) htmlShipPart.classList.add(\"small-cell--dead\");\n            htmlShip.append(htmlShipPart);\n        }\n        result.push(htmlShip);\n    }\n    return result;\n}\n\n\n\n\n\nconst $a3f377ba5dda2574$var$board1 = document.querySelector(\"#section1 .player-board\");\nconst $a3f377ba5dda2574$var$board2 = document.querySelector(\"#section2 .player-board\");\nconst $a3f377ba5dda2574$var$board1Clone = $a3f377ba5dda2574$var$board1.cloneNode(true);\nconst $a3f377ba5dda2574$var$board2Clone = $a3f377ba5dda2574$var$board2.cloneNode(true);\nlet $a3f377ba5dda2574$var$thePlayer;\nlet $a3f377ba5dda2574$var$theEnemy;\nlet $a3f377ba5dda2574$var$currentShipToPlace;\nlet $a3f377ba5dda2574$var$currentShipDirection = \"up\";\nlet $a3f377ba5dda2574$var$turn = 1;\nfunction $a3f377ba5dda2574$var$takeTurns() {\n    if ($a3f377ba5dda2574$var$turn === 1) {\n        $a3f377ba5dda2574$var$board2.classList.remove(\"turn\");\n        $a3f377ba5dda2574$var$board1.classList.add(\"turn\");\n        return 2;\n    } else {\n        $a3f377ba5dda2574$var$board1.classList.remove(\"turn\");\n        $a3f377ba5dda2574$var$board2.classList.add(\"turn\");\n        return 1;\n    }\n}\nfunction $a3f377ba5dda2574$export$d6c2200da3fe4ebb(ship) {\n    $a3f377ba5dda2574$var$currentShipToPlace = ship;\n}\nfunction $a3f377ba5dda2574$export$cf7d6a5152787ed6(player) {\n    $a3f377ba5dda2574$var$thePlayer = player;\n}\nfunction $a3f377ba5dda2574$export$a23bb352f15b82a1(enemy) {\n    $a3f377ba5dda2574$var$theEnemy = enemy;\n}\nfunction $a3f377ba5dda2574$export$98dec4ea4ece2fa6() {\n    $a3f377ba5dda2574$var$board1.style.cursor = \"pointer\";\n    const board1Cells = $a3f377ba5dda2574$var$board1.querySelectorAll(\".cell\");\n    board1Cells.forEach((cell)=>{\n        cell.addEventListener(\"mouseover\", ()=>{\n            $a3f377ba5dda2574$var$renderShipProjection(cell);\n        });\n        cell.addEventListener(\"mouseout\", ()=>{\n            board1Cells.forEach((cell)=>{\n                cell.classList.remove(\"cell--hover\");\n            });\n        });\n        cell.addEventListener(\"click\", ()=>{\n            const shipsOnGameboardCount = $a3f377ba5dda2574$var$thePlayer.gameboard.shipsOnGameboard.length;\n            const clickResultSuccessful = $a3f377ba5dda2574$var$handleOwnBoardClick(cell);\n            (0, $b8f0d7ab97dededd$export$de3e5ae76793348d)($a3f377ba5dda2574$var$thePlayer);\n            if (shipsOnGameboardCount === $a3f377ba5dda2574$var$thePlayer.ships.length - 1 && clickResultSuccessful) {\n                $a3f377ba5dda2574$var$board1.parentNode.replaceChild($a3f377ba5dda2574$var$board1Clone, $a3f377ba5dda2574$var$board1);\n                (0, $b8f0d7ab97dededd$export$a27f2fe564091e34)();\n                (0, $b8f0d7ab97dededd$export$2cd8252107eb640b)();\n                (0, $b8f0d7ab97dededd$export$de3e5ae76793348d)($a3f377ba5dda2574$var$thePlayer);\n                (0, $b4e14b6b8da86996$export$2d5a3010db5551f4)();\n            }\n            if (shipsOnGameboardCount + 1 === $a3f377ba5dda2574$var$thePlayer.gameboard.shipsOnGameboard.length) $a3f377ba5dda2574$var$currentShipToPlace = $a3f377ba5dda2574$var$thePlayer.ships[$a3f377ba5dda2574$var$thePlayer.ships.indexOf($a3f377ba5dda2574$var$currentShipToPlace) + 1];\n        });\n    });\n}\nfunction $a3f377ba5dda2574$export$9ab85d9ca55c9af9() {\n    $a3f377ba5dda2574$var$board2.style.cursor = \"pointer\";\n    $a3f377ba5dda2574$var$board2.classList.add(\"turn\");\n    const board2Cells = $a3f377ba5dda2574$var$board2.querySelectorAll(\".cell\");\n    board2Cells.forEach((cell)=>{\n        cell.addEventListener(\"click\", ()=>{\n            if ($a3f377ba5dda2574$var$turn === 2) return;\n            const index = [\n                ...board2Cells\n            ].indexOf(cell);\n            $a3f377ba5dda2574$var$handleEnemyBoardClick(index);\n            (0, $b8f0d7ab97dededd$export$c557ab29ccfb7412)($a3f377ba5dda2574$var$theEnemy);\n        });\n    });\n}\nfunction $a3f377ba5dda2574$var$renderShipProjection(cell) {\n    const board1Cells = $a3f377ba5dda2574$var$board1.querySelectorAll(\".cell\");\n    const coords = (0, $42da5ad2df7a1981$export$d598bea9b5c28c76)([\n        ...board1Cells\n    ].indexOf(cell));\n    const result = [];\n    if ($a3f377ba5dda2574$var$currentShipDirection === \"up\") for(let i = 0; i < $a3f377ba5dda2574$var$currentShipToPlace.size; i++)result.push({\n        x: coords.x,\n        y: coords.y + i\n    });\n    else if ($a3f377ba5dda2574$var$currentShipDirection === \"right\") for(let i = 0; i < $a3f377ba5dda2574$var$currentShipToPlace.size; i++)result.push({\n        x: coords.x - i,\n        y: coords.y\n    });\n    const indexes = result.map((pos)=>{\n        if (pos.x < 1 || pos.y > 10) return -1;\n        return 10 * (pos.y - 1) + pos.x - 1;\n    });\n    for (let i of indexes){\n        if (i === -1) continue;\n        board1Cells[i].classList.add(\"cell--hover\");\n    }\n}\nfunction $a3f377ba5dda2574$var$handleOwnBoardClick(cell) {\n    const board1Cells = $a3f377ba5dda2574$var$board1.querySelectorAll(\".cell\");\n    const pos = (0, $42da5ad2df7a1981$export$d598bea9b5c28c76)([\n        ...board1Cells\n    ].indexOf(cell));\n    return $a3f377ba5dda2574$var$thePlayer.placeShipSuccessfully($a3f377ba5dda2574$var$currentShipToPlace, pos, $a3f377ba5dda2574$var$currentShipDirection);\n}\nfunction $a3f377ba5dda2574$var$handleEnemyBoardClick(index) {\n    if ($a3f377ba5dda2574$var$theEnemy.gameboard.grid.atIndex(index).isHit) return;\n    let shipsAliveBefore = $a3f377ba5dda2574$var$enemyShipsAliveCount();\n    let shotResult = $a3f377ba5dda2574$var$thePlayer.shoot($a3f377ba5dda2574$var$theEnemy, (0, $42da5ad2df7a1981$export$d598bea9b5c28c76)(index));\n    while(shotResult === null)shotResult = $a3f377ba5dda2574$var$thePlayer.shoot($a3f377ba5dda2574$var$theEnemy, (0, $42da5ad2df7a1981$export$d598bea9b5c28c76)(index));\n    (0, $b8f0d7ab97dededd$export$c557ab29ccfb7412)($a3f377ba5dda2574$var$theEnemy);\n    if (shotResult === \"miss\") {\n        $a3f377ba5dda2574$var$turn = $a3f377ba5dda2574$var$takeTurns();\n        setTimeout($a3f377ba5dda2574$var$enemyShoots, 500);\n    } else if (shotResult === \"hit\") {\n        if ($a3f377ba5dda2574$var$enemyShipsAliveCount() === 0) {\n            (0, $b8f0d7ab97dededd$export$6558b1f3861b096)(5);\n            $a3f377ba5dda2574$var$endGame();\n        } else if ($a3f377ba5dda2574$var$enemyShipsAliveCount() === shipsAliveBefore - 1) (0, $b8f0d7ab97dededd$export$6558b1f3861b096)(4);\n        else (0, $b8f0d7ab97dededd$export$6558b1f3861b096)(3);\n    }\n}\nfunction $a3f377ba5dda2574$var$enemyShoots() {\n    (0, $b8f0d7ab97dededd$export$6558b1f3861b096)(2);\n    setTimeout(()=>{\n        let shotResult = $a3f377ba5dda2574$var$theEnemy.shoot($a3f377ba5dda2574$var$thePlayer);\n        while(shotResult === null)shotResult = $a3f377ba5dda2574$var$theEnemy.shoot($a3f377ba5dda2574$var$thePlayer);\n        (0, $b8f0d7ab97dededd$export$de3e5ae76793348d)($a3f377ba5dda2574$var$thePlayer);\n        if (shotResult === \"hit\") {\n            if ($a3f377ba5dda2574$var$checkPlayerShips() === \"AI WON\") {\n                (0, $b8f0d7ab97dededd$export$6558b1f3861b096)(6);\n                $a3f377ba5dda2574$var$endGame();\n            } else $a3f377ba5dda2574$var$enemyShoots();\n        } else {\n            (0, $b8f0d7ab97dededd$export$6558b1f3861b096)(1);\n            $a3f377ba5dda2574$var$turn = $a3f377ba5dda2574$var$takeTurns();\n        }\n    }, 1000);\n}\nfunction $a3f377ba5dda2574$var$checkPlayerShips() {\n    const shipsAlive = $a3f377ba5dda2574$var$thePlayer.ships.filter((ship)=>{\n        if (ship.isAlive) return ship;\n    });\n    if (shipsAlive.length === 0) return \"AI WON\";\n}\nfunction $a3f377ba5dda2574$var$enemyShipsAliveCount() {\n    const shipsAlive = $a3f377ba5dda2574$var$theEnemy.ships.filter((ship)=>{\n        if (ship.isAlive) return ship;\n    });\n    return shipsAlive.length;\n}\nfunction $a3f377ba5dda2574$export$45fd8c54db531b7d() {\n    const board1Cells = $a3f377ba5dda2574$var$board1.querySelectorAll(\".cell\");\n    board1Cells.forEach((cell)=>{\n        cell.addEventListener(\"contextmenu\", (event)=>{\n            event.preventDefault();\n            $a3f377ba5dda2574$var$toggleShipDirection();\n            board1Cells.forEach((cell)=>{\n                cell.classList.remove(\"cell--hover\");\n            });\n            $a3f377ba5dda2574$var$renderShipProjection(cell);\n        });\n    });\n}\nfunction $a3f377ba5dda2574$var$toggleShipDirection() {\n    if ($a3f377ba5dda2574$var$currentShipDirection === \"up\") $a3f377ba5dda2574$var$currentShipDirection = \"right\";\n    else $a3f377ba5dda2574$var$currentShipDirection = \"up\";\n}\nfunction $a3f377ba5dda2574$var$endGame() {\n    alert(\"THE END!\");\n    $a3f377ba5dda2574$var$board2.parentNode.replaceChild($a3f377ba5dda2574$var$board2Clone, $a3f377ba5dda2574$var$board2);\n    (0, $b8f0d7ab97dededd$export$a27f2fe564091e34)();\n    (0, $b8f0d7ab97dededd$export$2cd8252107eb640b)();\n    (0, $b8f0d7ab97dededd$export$de3e5ae76793348d)($a3f377ba5dda2574$var$thePlayer);\n    (0, $b8f0d7ab97dededd$export$c557ab29ccfb7412)($a3f377ba5dda2574$var$theEnemy);\n    $a3f377ba5dda2574$var$board2.style.cursor = \"unset\";\n}\n\n\n\n// On page load creation and rendering\n(0, $b8f0d7ab97dededd$export$2cd8252107eb640b)();\nconst $b4e14b6b8da86996$var$p = new (0, $b2f1e9a6ec8b94de$exports.Player)();\nconst $b4e14b6b8da86996$var$ai = new (0, $b2f1e9a6ec8b94de$exports.AI)();\n(0, $a3f377ba5dda2574$export$cf7d6a5152787ed6)($b4e14b6b8da86996$var$p);\n(0, $a3f377ba5dda2574$export$a23bb352f15b82a1)($b4e14b6b8da86996$var$ai);\n(0, $b8f0d7ab97dededd$export$de3e5ae76793348d)($b4e14b6b8da86996$var$p);\n(0, $b8f0d7ab97dededd$export$c557ab29ccfb7412)($b4e14b6b8da86996$var$ai);\n(0, $a3f377ba5dda2574$export$d6c2200da3fe4ebb)($b4e14b6b8da86996$var$p.ships[0]);\n(0, $a3f377ba5dda2574$export$98dec4ea4ece2fa6)();\n(0, $a3f377ba5dda2574$export$45fd8c54db531b7d)();\n(0, $b8f0d7ab97dededd$export$6558b1f3861b096)(0);\nfunction $b4e14b6b8da86996$export$2d5a3010db5551f4() {\n    $b4e14b6b8da86996$export$5f9f2982725d71d5();\n}\nfunction $b4e14b6b8da86996$export$5f9f2982725d71d5() {\n    $b4e14b6b8da86996$var$aiPlaceShipsRandomly();\n    (0, $a3f377ba5dda2574$export$9ab85d9ca55c9af9)();\n    (0, $b8f0d7ab97dededd$export$6558b1f3861b096)(1);\n}\nfunction $b4e14b6b8da86996$var$aiPlaceShipsRandomly() {\n    for (const ship of $b4e14b6b8da86996$var$ai.ships){\n        let shipIsPlaced = $b4e14b6b8da86996$var$ai.placeShipSuccessfully(ship, $b4e14b6b8da86996$var$ai.getRandomPosition(), (0, $42da5ad2df7a1981$export$c0f58cfb66611d0d)());\n        while(!shipIsPlaced)shipIsPlaced = $b4e14b6b8da86996$var$ai.placeShipSuccessfully(ship, $b4e14b6b8da86996$var$ai.getRandomPosition(), (0, $42da5ad2df7a1981$export$c0f58cfb66611d0d)());\n    }\n}\n\n\n//# sourceMappingURL=index.fd70a197.js.map\n","import { Player, AI } from \"./modules/game\";\nimport {\n  init as initDisplay,\n  refreshBoard1,\n  refreshBoard2,\n  displayMessage,\n} from \"./modules/display\";\nimport {\n  bindBoard1,\n  bindBoard2,\n  bindRMB,\n  updateCurrentShipToPlace,\n  setPlayer,\n  setEnemy,\n} from \"./modules/controller\";\nimport { getRandomShipDirection } from \"./modules/utility\";\n\n// On page load creation and rendering\ninitDisplay();\nconst p = new Player();\nconst ai = new AI();\nsetPlayer(p);\nsetEnemy(ai);\nrefreshBoard1(p);\nrefreshBoard2(ai);\nupdateCurrentShipToPlace(p.ships[0]);\nbindBoard1();\nbindRMB();\ndisplayMessage(0);\n\nexport function startGameToggle() {\n  startGame();\n}\n\nexport function startGame() {\n  aiPlaceShipsRandomly();\n  bindBoard2();\n  displayMessage(1);\n}\n\nfunction aiPlaceShipsRandomly() {\n  for (const ship of ai.ships) {\n    let shipIsPlaced = ai.placeShipSuccessfully(\n      ship,\n      ai.getRandomPosition(),\n      getRandomShipDirection()\n    );\n    while (!shipIsPlaced) {\n      shipIsPlaced = ai.placeShipSuccessfully(\n        ship,\n        ai.getRandomPosition(),\n        getRandomShipDirection()\n      );\n    }\n  }\n}\n","import { Coords, SquareGrid } from \"./utility\";\n\nexport class Ship {\n  size: number;\n  health: number;\n  isAlive: boolean;\n  bodyCoords: Array<Coords>;\n\n  constructor(size: number) {\n    this.size = size;\n    this.health = size;\n    this.isAlive = true;\n    this.bodyCoords = [];\n  }\n\n  getHit() {\n    if (this.health <= 0 || !this.isAlive) return;\n    this.health -= 1;\n    if (this.health <= 0) {\n      this.isAlive = false;\n    }\n  }\n}\n\nclass BoardCell {\n  isHit: boolean;\n  ship: Ship | null;\n  isOccupied: boolean;\n\n  constructor() {\n    this.isHit = false;\n    this.ship = null;\n    this.isOccupied = false;\n  }\n}\n\nclass Gameboard {\n  grid: SquareGrid;\n  boardSize: number;\n  shipsOnGameboard: Array<Ship>;\n  shotsCounter: number;\n  shotsOnTargetCounter: number;\n\n  constructor(boardSize: number) {\n    this.grid = new SquareGrid(boardSize, BoardCell);\n    this.boardSize = boardSize;\n    this.shipsOnGameboard = [];\n    this.shotsCounter = 0;\n    this.shotsOnTargetCounter = 0;\n  }\n\n  calculateBodyCoords(size: number, frontPos: Coords, facing: \"up\" | \"right\") {\n    const result: Array<Coords> = [];\n    if (facing === \"up\") {\n      for (let i = 0; i < size; i++) {\n        result.push({ x: frontPos.x, y: frontPos.y + i });\n      }\n    } else if (facing === \"right\") {\n      for (let i = 0; i < size; i++) {\n        result.push({ x: frontPos.x - i, y: frontPos.y });\n      }\n    }\n    return result;\n  }\n\n  blockAdjacentCoords(pos: Coords) {\n    const deltas = [\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n      [-1, 0],\n      [1, 0],\n      [-1, -1],\n      [0, -1],\n      [1, -1],\n    ];\n    for (const delta of deltas) {\n      const cellCoords = { x: pos.x + delta[0], y: pos.y + delta[1] };\n      if (cellCoords.x < 1 || cellCoords.x > this.boardSize) continue;\n      if (cellCoords.y < 1 || cellCoords.y > this.boardSize) continue;\n      if (this.grid.at(cellCoords).isOccupied) continue;\n      this.grid.at(cellCoords).isOccupied = true;\n    }\n  }\n\n  checkPositionLegal(size: number, frontPos: Coords, facing: \"up\" | \"right\") {\n    const bodyCoords = this.calculateBodyCoords(size, frontPos, facing);\n    for (const pos of bodyCoords) {\n      if (pos.x < 1 || pos.x > this.boardSize) return false;\n      if (pos.y < 1 || pos.y > this.boardSize) return false;\n      if (this.grid.at(pos).isOccupied) return false;\n    }\n    return true;\n  }\n\n  placeShip(ship: Ship, frontPos: Coords, facing: \"up\" | \"right\") {\n    if (this.shipsOnGameboard.includes(ship)) return;\n    if (!this.checkPositionLegal(ship.size, frontPos, facing)) return;\n    const bodyCoords = this.calculateBodyCoords(ship.size, frontPos, facing);\n    for (const pos of bodyCoords) {\n      this.grid.at(pos).ship = ship;\n      this.grid.at(pos).isOccupied = true;\n      this.blockAdjacentCoords(pos);\n    }\n    ship.bodyCoords.push(...bodyCoords);\n    this.shipsOnGameboard.push(ship);\n  }\n\n  receiveShot(pos: Coords) {\n    let cell = this.grid.at(pos);\n    if (cell.isHit) return;\n    cell.isHit = true;\n    this.shotsCounter++;\n    if (cell.ship) {\n      cell.ship.getHit();\n      this.shotsOnTargetCounter++;\n    }\n  }\n}\n\nexport class Player {\n  gameboard: Gameboard;\n  ships: Array<Ship>;\n\n  constructor() {\n    this.gameboard = new Gameboard(10);\n    this.ships = [...this.initShips()];\n  }\n\n  initShips() {\n    const result = [new Ship(5)];\n    result.push(new Ship(4), new Ship(4));\n    result.push(new Ship(3), new Ship(3));\n    result.push(new Ship(2), new Ship(2), new Ship(2));\n    return result;\n  }\n\n  placeShipSuccessfully(ship: Ship, frontPos: Coords, facing: \"up\" | \"right\") {\n    const currentShipsOnBoard = this.gameboard.shipsOnGameboard.length;\n    this.gameboard.placeShip(ship, frontPos, facing);\n    if (this.gameboard.shipsOnGameboard.length === currentShipsOnBoard + 1) return true;\n    return false;\n  }\n\n  shoot(opponent: Player, pos: Coords): \"hit\" | \"miss\" | null {\n    const currentShotsCounter = opponent.gameboard.shotsCounter; // to check if same shot was attempted before\n    const currentShotsOnTarget = opponent.gameboard.shotsOnTargetCounter; // to check if it hit a ship\n    opponent.gameboard.receiveShot(pos);\n    if (opponent.gameboard.shotsCounter === currentShotsCounter) return null;\n    if (opponent.gameboard.shotsOnTargetCounter > currentShotsOnTarget) return \"hit\";\n    return \"miss\";\n  }\n\n  countShipsAlive() {\n    return this.ships.filter((ship) => {\n      if (ship.isAlive === true) return ship;\n    }).length;\n  }\n}\n\nexport class AI extends Player {\n  clue: Coords | null;\n  clueDeltas: Array<any>;\n  impossibleCoords: Set<string>;\n\n  constructor() {\n    super();\n    this.clue = null;\n    this.clueDeltas = [\n      [0, 1],\n      [1, 0],\n      [0, -1],\n      [-1, 0],\n    ];\n    this.impossibleCoords = new Set();\n  }\n\n  shoot(opponent: Player, pos?: Coords): \"hit\" | \"miss\" | null {\n    console.log(this.impossibleCoords);\n\n    if (pos) {\n      const countOfShipsAlive = opponent.countShipsAlive();\n      const shotResult = Player.prototype.shoot(opponent, pos);\n      if (shotResult === \"hit\") {\n        if (this.clue) {\n          if (this.clue.x === pos.x + 1 || this.clue.x === pos.x - 1) {\n            this.clueDeltas = [\n              [1, 0],\n              [-1, 0],\n            ];\n          } else {\n            this.clueDeltas = [\n              [0, 1],\n              [0, -1],\n            ];\n          }\n        }\n        this.clue = pos; // update clues\n\n        const newCountOfShipsAlive = opponent.countShipsAlive();\n\n        if (countOfShipsAlive === newCountOfShipsAlive + 1) {\n          this.clue = null; // forget all clues\n          this.clueDeltas = [\n            [0, 1],\n            [1, 0],\n            [0, -1],\n            [-1, 0],\n          ];\n\n          const theShip = opponent.gameboard.grid.at(pos).ship;\n          for (const cell of theShip.bodyCoords) {\n            this.pushImpossibleCoords(cell);\n          }\n        }\n      }\n      return shotResult;\n    } else if (this.clue === null) {\n      return this.shootRandomly(opponent);\n    } else {\n      return this.shootWithClue(opponent);\n    }\n  }\n\n  shootRandomly(opponent: Player) {\n    const countOfShipsAlive = opponent.countShipsAlive();\n\n    let randomPosition = this.getRandomPosition();\n    let safeLoop = 0;\n    while ([...this.impossibleCoords].includes(`${randomPosition.x}-${randomPosition.y}`)) {\n      randomPosition = this.getRandomPosition();\n      // (if impossible to hit anything, get another position)\n      safeLoop++;\n      if (safeLoop > 1499) throw new Error(\"Something went wrong\");\n    }\n    safeLoop = 0;\n    let shotResult = Player.prototype.shoot(opponent, randomPosition);\n    while (\n      shotResult === null &&\n      [...this.impossibleCoords].includes(`${randomPosition.x}-${randomPosition.y}`)\n    ) {\n      randomPosition = this.getRandomPosition();\n      shotResult = Player.prototype.shoot(opponent, randomPosition); // if mistake, try again\n      safeLoop++;\n      if (safeLoop > 1499) throw new Error(\"Something went wrong\");\n    }\n    if (shotResult === \"hit\") {\n      this.clue = randomPosition; // update clues\n\n      const newCountOfShipsAlive = opponent.countShipsAlive();\n\n      if (countOfShipsAlive === newCountOfShipsAlive + 1) {\n        this.clue = null; // forget all clues\n\n        const theShip = opponent.gameboard.grid.at(randomPosition).ship;\n        for (const cell of theShip.bodyCoords) {\n          this.pushImpossibleCoords(cell);\n        }\n      }\n    }\n    return shotResult;\n  }\n\n  shootWithClue(opponent: Player): \"hit\" | \"miss\" | null {\n    const deltas = this.clueDeltas;\n    const { x, y } = this.clue!;\n    let randomDelta = deltas[Math.floor(Math.random() * deltas.length)];\n    let possibleShot = { x: x + randomDelta[0], y: y + randomDelta[1] };\n    let safeLoop = 0;\n    while (\n      [...this.impossibleCoords].includes(`${possibleShot.x}-${possibleShot.y}`) ||\n      possibleShot.x < 1 ||\n      possibleShot.x > 10 ||\n      possibleShot.y < 1 ||\n      possibleShot.y > 10 ||\n      opponent.gameboard.grid.at(possibleShot).isHit === true\n    ) {\n      randomDelta = deltas[Math.floor(Math.random() * deltas.length)];\n      possibleShot = { x: x + randomDelta[0], y: y + randomDelta[1] };\n      // (when shot invalid, try again)\n      safeLoop++;\n      if (safeLoop > 10) break;\n    }\n    if (safeLoop > 10) {\n      this.clue = null; // if no result, forget clue\n      return null;\n    }\n    return this.shoot(opponent, possibleShot);\n  }\n\n  getRandomPosition() {\n    const randomX = Math.ceil(Math.random() * 10);\n    const randomY = Math.ceil(Math.random() * 10);\n    return { x: randomX, y: randomY };\n  }\n\n  pushImpossibleCoords(pos: Coords) {\n    const deltas = [\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n      [-1, 0],\n      [1, 0],\n      [-1, -1],\n      [0, -1],\n      [1, -1],\n    ];\n    for (const delta of deltas) {\n      const cellCoords = { x: pos.x + delta[0], y: pos.y + delta[1] };\n      if (cellCoords.x < 1 || cellCoords.x > 10) continue;\n      if (cellCoords.y < 1 || cellCoords.y > 10) continue;\n      if ([...this.impossibleCoords].includes(`${cellCoords.x}-${cellCoords.y}`)) continue;\n      this.impossibleCoords.add(`${cellCoords.x}-${cellCoords.y}`);\n    }\n  }\n}\n\nmodule.exports = { Ship, Gameboard, Player, AI };\n","export type Coords = {\n  x: number;\n  y: number;\n};\n\nexport class SquareGrid {\n  size: number;\n  cells: Array<any>;\n\n  constructor(size: number, ItemClass) {\n    this.size = size;\n    this.cells = Array.from({ length: this.size * this.size }, () => new ItemClass());\n  }\n\n  at(pos: Coords) {\n    if (pos.x < 1 || pos.x > this.size) return;\n    if (pos.y < 1 || pos.y > this.size) return;\n    const index = this.size * (pos.y - 1) + pos.x - 1;\n    return this.cells[index];\n  }\n\n  atIndex(index: number) {\n    return this.cells[index];\n  }\n}\n\nexport function indexToCoordinates(index: number): Coords {\n  const gridSize = 10;\n  const x = index % gridSize;\n  const y = Math.floor(index / gridSize);\n\n  return { x: x + 1, y: y + 1 };\n}\n\nexport function getRandomShipDirection(): \"up\" | \"right\" {\n  if (Math.random() > 0.5) return \"up\";\n  return \"right\";\n}\n","import { Player } from \"./game\";\n\nconst section1: HTMLElement = document.querySelector(\"#section1\")!;\nconst section2: HTMLElement = document.querySelector(\"#section2\")!;\nlet board1: HTMLElement = section1.querySelector(\".player-board\")!;\nlet board2: HTMLElement = section2.querySelector(\".player-board\")!;\nconst textParagraph: HTMLElement = document.querySelector(\".text-field > p\")!;\n\nconst messages = [\n  \"Place your ships. Press <b>right mouse button</b> to rotate the ship...\",\n  \"Make your move!\",\n  \"Waiting for opponent to shoot...\",\n  \"Hit! Make your next move...\",\n  \"Ship destroyed! Make your next move...\",\n  \"YOU WON! Reload the page to play again.\",\n  \"YOU LOST! Reload the page to play again.\",\n];\n\nexport function displayMessage(i: number) {\n  textParagraph.innerHTML = messages[i];\n}\n\nexport function updateBoardReference() {\n  board1 = section1.querySelector(\".player-board\")!;\n  board2 = section2.querySelector(\".player-board\")!;\n}\n\nexport function init() {\n  const gridSize = 10;\n  board1.style.gridTemplateRows = `repeat(${gridSize}, 1fr)`;\n  board1.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`;\n  board2.style.gridTemplateRows = `repeat(${gridSize}, 1fr)`;\n  board2.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`;\n\n  for (let i = 0; i < 10; i++) {\n    for (let j = 0; j < 10; j++) {\n      const cell = document.createElement(\"div\");\n      cell.classList.add(\"cell\");\n      board1.appendChild(cell);\n    }\n  }\n\n  for (let i = 0; i < 10; i++) {\n    for (let j = 0; j < 10; j++) {\n      const cell = document.createElement(\"div\");\n      cell.classList.add(\"cell\", \"cell--hidden\");\n\n      board2.appendChild(cell);\n    }\n  }\n}\n\nexport function refreshBoard1(player: Player) {\n  const grid = player.gameboard.grid;\n  const htmlCells = board1.querySelectorAll(\".cell\");\n  for (const cell of grid.cells) {\n    if (cell.isHit && cell.ship !== null) {\n      htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--hit-ship\");\n    } else if (cell.isHit) {\n      htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--hit\");\n    } else if (cell.ship !== null) {\n      htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--ship-part\");\n    }\n  }\n  section1.querySelector(\".player-ships\")!.innerHTML = \"\";\n  const ships = getShipsHTML(player);\n  for (const ship of ships) {\n    section1.querySelector(\".player-ships\")!.append(ship);\n  }\n}\n\nexport function refreshBoard2(player: Player) {\n  const grid = player.gameboard.grid;\n  const htmlCells = board2.querySelectorAll(\".cell\");\n  for (const cell of grid.cells) {\n    if (cell.isHit && cell.ship !== null) {\n      htmlCells[grid.cells.indexOf(cell)].classList.remove(\"cell--hidden\");\n      htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--hit-ship\");\n    } else if (cell.isHit) {\n      htmlCells[grid.cells.indexOf(cell)].classList.remove(\"cell--hidden\");\n      htmlCells[grid.cells.indexOf(cell)].classList.add(\"cell--hit\");\n    }\n  }\n  section2.querySelector(\".player-ships\")!.innerHTML = \"\";\n  const ships = getShipsHTML(player);\n  for (const ship of ships) {\n    section2.querySelector(\".player-ships\")!.append(ship);\n  }\n}\n\nfunction getShipsHTML(player: Player) {\n  const result: Array<HTMLDivElement> = [];\n  for (const ship of player.ships) {\n    const htmlShip = document.createElement(\"div\");\n    htmlShip.classList.add(\"small-ship\");\n    for (let i = 0; i < ship.size; i++) {\n      const htmlShipPart = document.createElement(\"div\");\n      htmlShipPart.classList.add(\"small-cell\");\n      if (!ship.isAlive) {\n        htmlShipPart.classList.add(\"small-cell--dead\");\n      }\n      htmlShip.append(htmlShipPart);\n    }\n    result.push(htmlShip);\n  }\n  return result;\n}\n","import { Ship, Player, AI } from \"./game\";\nimport { indexToCoordinates } from \"./utility\";\nimport { startGameToggle } from \"..\";\nimport {\n  displayMessage,\n  init as initDisplay,\n  refreshBoard1,\n  refreshBoard2,\n  updateBoardReference,\n} from \"./display\";\n\nconst board1: HTMLElement = document.querySelector(\"#section1 .player-board\")!;\nconst board2: HTMLElement = document.querySelector(\"#section2 .player-board\")!;\nconst board1Clone = board1.cloneNode(true);\nconst board2Clone = board2.cloneNode(true);\n\nlet thePlayer: Player;\nlet theEnemy: AI;\nlet currentShipToPlace: Ship | null;\nlet currentShipDirection: \"up\" | \"right\" = \"up\";\n\nlet turn: 1 | 2 = 1;\n\nfunction takeTurns() {\n  if (turn === 1) {\n    board2.classList.remove(\"turn\");\n    board1.classList.add(\"turn\");\n    return 2;\n  } else {\n    board1.classList.remove(\"turn\");\n    board2.classList.add(\"turn\");\n    return 1;\n  }\n}\n\nexport function updateCurrentShipToPlace(ship: Ship) {\n  currentShipToPlace = ship;\n}\n\nexport function setPlayer(player: Player) {\n  thePlayer = player;\n}\n\nexport function setEnemy(enemy: AI) {\n  theEnemy = enemy;\n}\n\nexport function bindBoard1() {\n  board1.style.cursor = \"pointer\";\n  const board1Cells = board1.querySelectorAll(\".cell\");\n  board1Cells.forEach((cell) => {\n    cell.addEventListener(\"mouseover\", () => {\n      renderShipProjection(cell);\n    });\n    cell.addEventListener(\"mouseout\", () => {\n      board1Cells.forEach((cell) => {\n        cell.classList.remove(\"cell--hover\");\n      });\n    });\n    cell.addEventListener(\"click\", () => {\n      const shipsOnGameboardCount = thePlayer.gameboard.shipsOnGameboard.length;\n      const clickResultSuccessful = handleOwnBoardClick(cell);\n      refreshBoard1(thePlayer);\n      if (shipsOnGameboardCount === thePlayer.ships.length - 1 && clickResultSuccessful) {\n        board1.parentNode!.replaceChild(board1Clone, board1);\n        updateBoardReference();\n        initDisplay();\n        refreshBoard1(thePlayer);\n        startGameToggle();\n      }\n      if (shipsOnGameboardCount + 1 === thePlayer.gameboard.shipsOnGameboard.length) {\n        currentShipToPlace = thePlayer.ships[thePlayer.ships.indexOf(currentShipToPlace!) + 1];\n      }\n    });\n  });\n}\n\nexport function bindBoard2() {\n  board2.style.cursor = \"pointer\";\n  board2.classList.add(\"turn\");\n  const board2Cells = board2.querySelectorAll(\".cell\");\n  board2Cells.forEach((cell) => {\n    cell.addEventListener(\"click\", () => {\n      if (turn === 2) return;\n      const index = [...board2Cells].indexOf(cell);\n      handleEnemyBoardClick(index);\n      refreshBoard2(theEnemy);\n    });\n  });\n}\n\nfunction renderShipProjection(cell: Element) {\n  const board1Cells = board1.querySelectorAll(\".cell\");\n  const coords = indexToCoordinates([...board1Cells].indexOf(cell));\n  const result: Array<any> = [];\n  if (currentShipDirection === \"up\") {\n    for (let i = 0; i < currentShipToPlace!.size; i++) {\n      result.push({ x: coords.x, y: coords.y + i });\n    }\n  } else if (currentShipDirection === \"right\") {\n    for (let i = 0; i < currentShipToPlace!.size; i++) {\n      result.push({ x: coords.x - i, y: coords.y });\n    }\n  }\n  const indexes: Array<number> = result.map((pos) => {\n    if (pos.x < 1 || pos.y > 10) {\n      return -1;\n    }\n    return 10 * (pos.y - 1) + pos.x - 1;\n  });\n  for (let i of indexes) {\n    if (i === -1) continue;\n    board1Cells[i].classList.add(\"cell--hover\");\n  }\n}\n\nfunction handleOwnBoardClick(cell) {\n  const board1Cells = board1.querySelectorAll(\".cell\");\n  const pos = indexToCoordinates([...board1Cells].indexOf(cell));\n  return thePlayer.placeShipSuccessfully(currentShipToPlace!, pos, currentShipDirection);\n}\n\nfunction handleEnemyBoardClick(index: number) {\n  if (theEnemy.gameboard.grid.atIndex(index).isHit) return;\n  let shipsAliveBefore = enemyShipsAliveCount();\n  let shotResult = thePlayer.shoot(theEnemy, indexToCoordinates(index));\n  while (shotResult === null) {\n    shotResult = thePlayer.shoot(theEnemy, indexToCoordinates(index));\n  }\n  refreshBoard2(theEnemy);\n  if (shotResult === \"miss\") {\n    turn = takeTurns();\n    setTimeout(enemyShoots, 500);\n  } else if (shotResult === \"hit\") {\n    if (enemyShipsAliveCount() === 0) {\n      displayMessage(5);\n      endGame();\n    } else if (enemyShipsAliveCount() === shipsAliveBefore - 1) {\n      displayMessage(4);\n    } else {\n      displayMessage(3);\n    }\n  }\n}\n\nfunction enemyShoots() {\n  displayMessage(2);\n  setTimeout(() => {\n    let shotResult = theEnemy.shoot(thePlayer);\n    while (shotResult === null) {\n      shotResult = theEnemy.shoot(thePlayer);\n    }\n    refreshBoard1(thePlayer);\n    if (shotResult === \"hit\") {\n      if (checkPlayerShips() === \"AI WON\") {\n        displayMessage(6);\n        endGame();\n      } else {\n        enemyShoots();\n      }\n    } else {\n      displayMessage(1);\n      turn = takeTurns();\n    }\n  }, 1000);\n}\n\nfunction checkPlayerShips() {\n  const shipsAlive = thePlayer.ships.filter((ship) => {\n    if (ship.isAlive) return ship;\n  });\n  if (shipsAlive.length === 0) return \"AI WON\";\n}\n\nfunction enemyShipsAliveCount() {\n  const shipsAlive = theEnemy.ships.filter((ship) => {\n    if (ship.isAlive) return ship;\n  });\n  return shipsAlive.length;\n}\n\nexport function bindRMB() {\n  const board1Cells = board1.querySelectorAll(\".cell\");\n  board1Cells.forEach((cell) => {\n    cell.addEventListener(\"contextmenu\", (event) => {\n      event.preventDefault();\n      toggleShipDirection();\n      board1Cells.forEach((cell) => {\n        cell.classList.remove(\"cell--hover\");\n      });\n      renderShipProjection(cell);\n    });\n  });\n}\n\nfunction toggleShipDirection() {\n  if (currentShipDirection === \"up\") {\n    currentShipDirection = \"right\";\n  } else {\n    currentShipDirection = \"up\";\n  }\n}\n\nfunction endGame() {\n  alert(\"THE END!\");\n  board2.parentNode!.replaceChild(board2Clone, board2);\n  updateBoardReference();\n  initDisplay();\n  refreshBoard1(thePlayer);\n  refreshBoard2(theEnemy);\n  board2.style.cursor = \"unset\";\n}\n"],"names":["$a3f377ba5dda2574$var$thePlayer","$a3f377ba5dda2574$var$theEnemy","$a3f377ba5dda2574$var$currentShipToPlace","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$b2f1e9a6ec8b94de$exports","$b2f1e9a6ec8b94de$export$2616165974278734","$b2f1e9a6ec8b94de$export$d710c5f50fc7496a","$42da5ad2df7a1981$export$5152af454f4d0087","constructor","size","ItemClass","cells","Array","from","length","at","pos","x","y","index","atIndex","$42da5ad2df7a1981$export$d598bea9b5c28c76","Math","floor","$42da5ad2df7a1981$export$c0f58cfb66611d0d","random","$b2f1e9a6ec8b94de$export$7930c61d9b464618","health","isAlive","bodyCoords","getHit","$b2f1e9a6ec8b94de$var$BoardCell","isHit","ship","isOccupied","$b2f1e9a6ec8b94de$var$Gameboard","boardSize","grid","shipsOnGameboard","shotsCounter","shotsOnTargetCounter","calculateBodyCoords","frontPos","facing","result","i","push","blockAdjacentCoords","delta","cellCoords","checkPositionLegal","placeShip","includes","receiveShot","cell","gameboard","ships","initShips","placeShipSuccessfully","currentShipsOnBoard","shoot","opponent","currentShotsCounter","currentShotsOnTarget","countShipsAlive","filter","clue","clueDeltas","impossibleCoords","Set","console","log","countOfShipsAlive","shotResult","prototype","newCountOfShipsAlive","theShip","pushImpossibleCoords","shootRandomly","shootWithClue","randomPosition","getRandomPosition","safeLoop","Error","deltas","randomDelta","possibleShot","ceil","add","Ship","Gameboard","Player","AI","$b8f0d7ab97dededd$var$section1","document","querySelector","$b8f0d7ab97dededd$var$section2","$b8f0d7ab97dededd$var$board1","$b8f0d7ab97dededd$var$board2","$b8f0d7ab97dededd$var$textParagraph","$b8f0d7ab97dededd$var$messages","$b8f0d7ab97dededd$export$6558b1f3861b096","innerHTML","$b8f0d7ab97dededd$export$a27f2fe564091e34","$b8f0d7ab97dededd$export$2cd8252107eb640b","style","gridTemplateRows","gridTemplateColumns","j","createElement","classList","appendChild","$b8f0d7ab97dededd$export$de3e5ae76793348d","player","htmlCells","querySelectorAll","indexOf","$b8f0d7ab97dededd$var$getShipsHTML","append","$b8f0d7ab97dededd$export$c557ab29ccfb7412","remove","htmlShip","htmlShipPart","$a3f377ba5dda2574$var$board1","$a3f377ba5dda2574$var$board2","$a3f377ba5dda2574$var$board1Clone","cloneNode","$a3f377ba5dda2574$var$board2Clone","$a3f377ba5dda2574$var$currentShipDirection","$a3f377ba5dda2574$var$turn","$a3f377ba5dda2574$var$takeTurns","$a3f377ba5dda2574$var$renderShipProjection","board1Cells","coords","indexes","map","$a3f377ba5dda2574$var$enemyShipsAliveCount","shipsAlive","$a3f377ba5dda2574$var$endGame","alert","parentNode","replaceChild","cursor","$b4e14b6b8da86996$var$p","$b4e14b6b8da86996$var$ai","forEach","addEventListener","shipsOnGameboardCount","clickResultSuccessful","$a3f377ba5dda2574$var$handleOwnBoardClick","$b4e14b6b8da86996$var$aiPlaceShipsRandomly","shipIsPlaced","board2Cells","$a3f377ba5dda2574$var$handleEnemyBoardClick","shipsAliveBefore","setTimeout","$a3f377ba5dda2574$var$enemyShoots","$a3f377ba5dda2574$var$checkPlayerShips","event","preventDefault"],"version":3,"file":"index.fd70a197.js.map"}